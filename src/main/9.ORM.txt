[ DB ]
    - 데이터베이스 : 데이터들의 집합
    - 데이터베이스 종류
        1. noSQL 데이터베이스 : SQL 대신 객체지향 데이터 관리
        2. 관계형(Relational)데이터베이스 : SQL 사용하는 테이블간 관계형 데이터베이스 관리

[ DAO ]
    - Data Access Object
    - JDBC : Java DATABASE Connection
    1. 데이터베이스 접근하여 자료들을 자바로 부터 데이터 관리 하는 객체
    2. 주요 인터페이스
        1. Connection
        2. PreparedStatement
        3. ResultSet

[ ORM ]  O : Object , R : Relational , M : Mapping
    1. 정의 : 객체지향 프로그래밍에서 사용하는 객체 와 관계형 데이터베이스에서 사용하는 테이블과 매핑(연결)해주는 기술.
        즉] 자바 객체와 관계형 데이터베이스 테이블 간 매핑을 자동으로 처리해주는 기술
    2. 목적 : 개발자에게 조금더 편리성 제공
    3. JAVA, PYTHON 등등

[ Hibernate ]
    1. 정의 : 자바에서 ORM을 구현한 프레임워크, 자바 객체를 관계형 데이터베이스에 쉽게 저장/조회할 수 있도록 도와주는 라이브러리.
    2. 목적 :
        1. SQL 쿼리를 자동으로 생성 해주기 때문에 편리하고 , 개발자 직접 SQL 작성하지 않아도 된다. [ 빠른 개발 ]
        -> 간단한 쿼리는 자동이지만, 복잡한 쿼리는 결국 직접 작성해야한다.
        2. 자동으로 타입 변환해주는 기능 제공
        3. JDBC(DAO)의 복잡함을 해결하고 간결한 코드를 이용하여 제공받은 라이브러리 빠른 개발
    3. Spring 프레임워크에서 공식적으로 지원

[ JPA ] : J:JAVA ,  P:Persistence  , A:API
    1. 정의 : 자바에서 ORM을 사용할때 표준 API, JPA는 자바에서 객체 관계 매핑(연결)을 어떻게 처리할지 정의한 규약/규칙
        -> Hibernate 는 구현(객)체 , JPA 는 인터페이스 : JPA 이용하여 Hibernate 사용한다.
    2. 목적 :
        1. JPA를 이용하여 SQL 생성 , 트랜잭션 관리, 엔티티 정의 등등 관리할 수 있다

[ ORM,Hibernate, JPA, DB 관계 ]
    1. ORM : 객체와 테이블 간의 매핑 처리 기술/방법
    2. Hibernate : ORM 기술의 구현체 이며, 프레임워크
    3. JPA : ORM 기술의 구현체를 조작하는 인터페이스 , 프레임워크
    4. DB : 실제 데이터가 저장된 서버

* 인터페이스 란? 추상메소드를 갖는 타입                          - ( 리모콘 )
* 구현(객)체 란? 추상메소드를 구현한 클래스로 만든 객체/인스턴스      - ( LGTV )

[ JPA 사용 할 준비 ]
    - gradle 프로젝트에 외부 라이브러리 추가 ==> 그레이들 추가
    1. build.gradle 파일에 JPA 의존성 추가한다.
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        * JPA 기본 설정하지 않으면 SPRING WEB 실행 불가능.
        * runtimeOnly 'com.mysql:mysql-connector-j' 와 같이 추가한다.

    2. JPA 가 매핑할 DB(JDBC) 정보를 설정해야 한다.
        * 설정 파일의 이름이 정해져 있다. resources 폴더 -> application.properties
        1. spring.datasource.driverClassName =  각DB회사의클래스경로
            mysql : com.mysql.cj.jdbc.Driver
            oracle : oracle.jdbc.driver.OracleDriver
            등등
        2. spring.datasource.url = 연동할DBserverUrl
        3. spring.datasource.username =계정명
        4. spring.datasource.password =비밀번호

[ 엔티티 Entity ] : 개체/실재/본체
    1. 정의 : 데이터베이스 테이블과 1:1로 매핑(연결)되는 인스턴스(객체)
        ---> 관점: 테이블 ==> 클래스 , 레코드 ==> 엔티티(인스턴스)
        ---> 클래스1개당 테이블1개 , 인스턴스1개당 레코드1개

        ---> 클래스를 만들고 엔티티설정 : DB의 테이블 생성한다.
        ---> 클래스로 인스턴스 생성 : DB의 테이블 레코드 생성한다.

    2. 엔티티 클래스 정의하는 방법
        @Entity : 클래스 위에 어노테이션 작성하기
            * 관례적으로 테이블1개당 pk필드 는 1개 이상 한다.
            * pk 설정하지 않으면 오류가 발생한다.
        @Id : 해당하는 필드/멤버변수 를 primary key 정의한다.
        @Column : 해당하는 필드/멤버변수 를 테이블 열(속성/필드) 정의한다.

    3. 엔티티 와 테이블 어떻게 처리할지 설정옵션 , application.properties
        spring.jpa.hibernate.ddl-auto = create/update/none/create-drop/validate
        1. create : 서버가 실행 될때마다 기존 테이블 삭제하고 새로운 테이블로 생성한다.
        2. update : 서버가 실행 될때마다 기존 테이블 유지하고 변경할 사항이 있을경우 자동 수정/생성 한다.
        3. none : 개발자 직접 수동 관리한다. ( 기본값 )
        4. create-drop : 서버가 종료될때 마다 테이블 삭제된다.
        5. validate : 서버가 실행 될때마다 엔티티 와 데이터베이스 일치 여부 확인,수정/생성 하지 않는다.

    4. 엔티티를 조작할 인터페이스 정의하는 방법
        1. @Repository : 메모리에 객체 생성 하고 mvc패턴의 Repository 담당 표시.
        2. extends JpaRepository< 조작할엔티티클래스명 , PK필드자바타입 >
            * extends 상속

    5. JPA 기본적으로 제공하는 함수.
        (1) .save( 엔티티/인스턴스 ) : 해당하는 엔티티를 매핑된 테이블에 레코드(엔티티) 등록 하는 함수
            - insert 쿼리문 대신에 사용하는 함수

        (2) .findAll( )           : 매핑된 테이블의 모든 레코드(엔티티) 를 반환 함수
            - select 쿼리문 대신에 사용하는 함수

        (3) .findById( pk번호 )    : 매핑된 테이블의 지정한 pk번호에 해당하는 레코드(엔티티)를 반환 함수
            - select 쿼리문 대신에 사용하는 함수
            - Optional 타입으로 반환하기 때문에 .get() 함수를 이용하여 엔티티를 반환 해야한다.
                < Optional > 타입 : 인스턴스가 null 일때 인스턴스 정보를 제공하는 메소드를 갖는 클래스
                    .get( )

        * 수정함수 별도로 존재하지 않는다 : (영속성) 엔티티/인스턴스 수정되면 DB의 레코드도 같이 수정
            !!!! : 영속성을 처리할 함수 위에 @Transactional
                -> 관례적으로 서비스 함수들은 JPA 이용하여 DB 조작하는 코드가 있을경우 @Transactional 주입한다.
            트랜잭션이란? 여러가지 처리 코드를 하나의 묶음
                -> 데이터 처리 단위를 관리하는 방법
                -> 특징 :
                    **원자성** : 처리 단위가 모두 성공 하거나 모두 실패 하게 만들어서 데이터 무결성 유지
                        -> 여러가지 처리 코드를 하나의 단위로 묶어서 한개라도 실패하면 모두 취소
                        -> 왜? 쇼핑몰 : 주문생성 -> 재고 차감 -> 결제 완료
                            -> 결제완료에서 오류가 발생하면 재고는 실질적으로 차감되면 안된다.
                            -> 결제완료에서 오류가 발생하면 재고차감,주문생성 모두 취소 / 뒤로가기
                            트랜잭션( 주문생성 -> 재고 차감 -> 결제 완료 )
                    일관성 : 처리 이후 데이터가 유효한(사용가능한) 상태를 유지
                    격리성 : 다른 트랜잭션과 서로 영향을 주지 않음
                    지속성 : 작업이 완료되면 데이터는 영구적으로 저장

        (4) .deleteById( pk번호 )  : 매핑된 테이블의 지정한 pk번호에 해당하는 레코드(엔티티)를 삭제 하는 함수.
            - delete 쿼리문 대신에 사용하는 함수

클래스 : 인스턴스를 만들기 위한 객체 설계도
인스턴스 : 클래스 기반으로 생성된 실체물
테이블 : 행과 열로 이루어진 표/테이블
레코드 : 행(row) 단위의 자료
속성/필드 : 열(column) 단위의 자료

[ 엔티티 관련 어노테이션 ]
    - 엔티티란 ? DB 테이블과 매핑된 객체(인스턴스)
    - 엔티티 클래스는 DB 테이블 이고 엔티티 객체(인스턴스)는 테이블 레코드
    1. @Entity : 객체를 관계형데이터베이스 테이블에 매핑 정의
    2. @Id : 엔티티 기본 키(Primary Key)를 지정
        * 모든 테이블은 1개 이상의 pk 필드를 갖는다.
        * JPARepository(인터페이스)는 pk 필드 1개를 필수로 한다.
    3. @Column : 테이블의 열(속성/필드) 매핑 정의
        - 자료형타입을 자동으로 DB타입으로 변환해준다.
        자바          mysql
        int             int
        boolean         bit
        byte            tinyint
        short           smallint
        char            char(1)
        float           float
        double          double
        long            bigint
        String          varchar(255)
        1. @Column( columnDefinition = "DB type" )
        2. @Column( nullable =  )
            -> not null 의 제약조건 : nullable =  false
        3. @Column( unique = )
            -> unique 의 제약조건 : unique = true

    4. @Table : 테이블 설정을 매핑 정의
        @Table( name = "테이블명" ) : 엔티티와 매핑된 테이블명 를 정의
        -> 생략할 경우 자동으로 테이블명 이 생성된다.
    5. @GeneratedValue( strategy = GenerationType.IDENTITY )
        -> auto_increment : mysql의 제약조건중 하나로써 자동번호 부여

[ 엔티티의 생성날짜 와 수정날짜 자동으로 주입 ]
    1. 엔티티 생성,수정 날짜/시간 필드/속성 를 하나의 (BaseTime) 클래스에 선언
    2. 사용할 엔티티에게 extends BaseTime 클래스 상속한다.
    주요 어노테이션
    @MappedSuperclass   : 현재 클래스는 데이터베이스의 매핑하지 않고 상속받은 엔티티에 속성을 매핑한다.
        - 해당 클래스는 매핑하지 않는다. 해당 클래스를 상속받은 클래스가 해당 클래스 엔티티의 속성을 매핑한다.
    @EntityListeners( AuditingEntityListener.class) :
        - 엔티티가 생성/수정될때 자동으로 @CreatedDate / @LastModifiedDate 속성값의 변화를 감지하고 값 설정
        - JPA Auditing 기능 활성화
            - Auditing(감사/실시간감시)
            - JPA가 실시간으로 엔티티의 변화의 감지를 한다.
            *** 1. AppStart 클래스위에 JPA Auditing 기능 켠다. ***
            @EnableJpaAuditing

    @CreatedDate        : 엔티티의 생성 날짜/시간를 자동으로 기록해주는 어노테이션
    @LastModifiedDate   : 엔티티의 마지막 수정 날짜/시간를 자동으로 기록해주는 어노테이션

* 실무에서는 레코드의 생성과 변경된 날짜/시간 기록를 한다. ( 문제 발생시 원인 찾기위해)


* 타입 변환 이유 : entity는 srping mvc 패턴의 controller에서 사용를 비권장.
    --> Restful Api 관리 담당 , service로직 담당 , 테스트 담당 , 데이터베이스 관리 담당 등등등
    --> entity는 db와 매핑된 자료 이므로 중요한 정보를 담고 있다. 그러므로 여러 레이어(구역)에서 사용하면 안전하지 못한다.
    --> [권장] entity 는 service 에서만 사용해라.

[ DTO ---> entity 변환 ]
    1. 이유 : controller 에서 DTO를 받아 service 에서는 DTO 를 entity 로 변환 해야한다.
    2. 왜 ? dto는 데이터베이스 와 매핑 관계가 아니므로 DTO를 entity 변환후 entity 조작해야한다.

[ entity ---> DTO 변환 ]
    1. 이유 : service 에서 조작한 entity 를 controller에게 보내기 위해 변환 해야한다.
    2. 왜? controller에게 entity를 주면 안된다. 이유 : 분업화

* 분업화
    Controller : 1. HTTP URL 매핑 2. HTTP 요청과 응답 하는곳 3. 타입변환
    Service : 비지니스로직 담당 ( 실질적인 기능의 코드 )
    Repository : 연동된 엔티티를 조작하는 인터페이스 담당
    Entity : 데이터베이스 테이블과 연동된 클래스/객체 담당
    DTO : 데이터 이동객체 , V <--DTO--> C <--DTO--> S

[ 연관관계 ]






























