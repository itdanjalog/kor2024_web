[ DB ]
    - 데이터베이스 : 데이터들의 집합
    - 데이터베이스 종류
        1. noSQL 데이터베이스 : SQL 대신 객체지향 데이터 관리
        2. 관계형(Relational)데이터베이스 : SQL 사용하는 테이블간 관계형 데이터베이스 관리

[ DAO ]
    - Data Access Object
    - JDBC : Java DATABASE Connection
    1. 데이터베이스 접근하여 자료들을 자바로 부터 데이터 관리 하는 객체
    2. 주요 인터페이스
        1. Connection
        2. PreparedStatement
        3. ResultSet

[ ORM ]  O : Object , R : Relational , M : Mapping
    1. 정의 : 객체지향 프로그래밍에서 사용하는 객체 와 관계형 데이터베이스에서 사용하는 테이블과 매핑(연결)해주는 기술.
        즉] 자바 객체와 관계형 데이터베이스 테이블 간 매핑을 자동으로 처리해주는 기술
    2. 목적 : 개발자에게 조금더 편리성 제공
    3. JAVA, PYTHON 등등

[ Hibernate ]
    1. 정의 : 자바에서 ORM을 구현한 프레임워크, 자바 객체를 관계형 데이터베이스에 쉽게 저장/조회할 수 있도록 도와주는 라이브러리.
    2. 목적 :
        1. SQL 쿼리를 자동으로 생성 해주기 때문에 편리하고 , 개발자 직접 SQL 작성하지 않아도 된다. [ 빠른 개발 ]
        -> 간단한 쿼리는 자동이지만, 복잡한 쿼리는 결국 직접 작성해야한다.
        2. 자동으로 타입 변환해주는 기능 제공
        3. JDBC(DAO)의 복잡함을 해결하고 간결한 코드를 이용하여 제공받은 라이브러리 빠른 개발
    3. Spring 프레임워크에서 공식적으로 지원

[ JPA ] : J:JAVA ,  P:Persistence  , A:API
    1. 정의 : 자바에서 ORM을 사용할때 표준 API, JPA는 자바에서 객체 관계 매핑(연결)을 어떻게 처리할지 정의한 규약/규칙
        -> Hibernate 는 구현(객)체 , JPA 는 인터페이스 : JPA 이용하여 Hibernate 사용한다.
    2. 목적 :
        1. JPA를 이용하여 SQL 생성 , 트랜잭션 관리, 엔티티 정의 등등 관리할 수 있다

[ ORM,Hibernate, JPA, DB 관계 ]
    1. ORM : 객체와 테이블 간의 매핑 처리 기술/방법
    2. Hibernate : ORM 기술의 구현체 이며, 프레임워크
    3. JPA : ORM 기술의 구현체를 조작하는 인터페이스 , 프레임워크
    4. DB : 실제 데이터가 저장된 서버

* 인터페이스 란? 추상메소드를 갖는 타입                          - ( 리모콘 )
* 구현(객)체 란? 추상메소드를 구현한 클래스로 만든 객체/인스턴스      - ( LGTV )

[ JPA 사용 할 준비 ]
    - gradle 프로젝트에 외부 라이브러리 추가 ==> 그레이들 추가
    1. build.gradle 파일에 JPA 의존성 추가한다.
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        * JPA 기본 설정하지 않으면 SPRING WEB 실행 불가능.
        * runtimeOnly 'com.mysql:mysql-connector-j' 와 같이 추가한다.

    2. JPA 가 매핑할 DB 정보를 설정해야 한다.
        * 설정 파일의 이름이 정해져 있다. resources 폴더 -> application.properties























